var documenterSearchIndex = {"docs":
[{"location":"population/#Population","page":"Population","title":"Population","text":"","category":"section"},{"location":"population/","page":"Population","title":"Population","text":"Modules = [HZAM.Population]\nOrder   = [:module]","category":"page"},{"location":"population/#HZAM.Population","page":"Population","title":"HZAM.Population","text":"Types and functions used for managing population data (locations, genotypes, and growth rates).\n\n\n\n\n\n","category":"module"},{"location":"population/#Constants","page":"Population","title":"Constants","text":"","category":"section"},{"location":"population/","page":"Population","title":"Population","text":"Modules = [HZAM.Population]\nOrder   = [:constant]","category":"page"},{"location":"population/#HZAM.Population.NUM_ZONES","page":"Population","title":"HZAM.Population.NUM_ZONES","text":"The width of the (square) grid of zones that divides the population into more manageable  chunks. Default is 10x10.\n\n\n\n\n\n","category":"constant"},{"location":"population/#Types","page":"Population","title":"Types","text":"","category":"section"},{"location":"population/","page":"Population","title":"Population","text":"Modules = [HZAM.Population]\nOrder   = [:type]","category":"page"},{"location":"population/#HZAM.Population.PopulationData","page":"Population","title":"HZAM.Population.PopulationData","text":"PopulationData\n\nA PopulationData stores the genotypes, locations, and growth rates for all individuals in  the simulation. The data is subdivided by 'zone' into a matrix for  calculation efficiency.\n\nFields\n\npopulation::Matrix{Zone}: all of the zones (containing the genotypes and locations) in the simulation.\ngrowth_rates_F::Matrix{Vector{Float64}}: the growth rates of every female for each zone.\n\nConstructors\n\n- function PopulationData(\n    K_total::Integer,\n    total_loci::Integer,\n    intrinsic_R::Real,\n    sigma_comp::Real\n)\n- PopulationData(\n    genotypes_daughters::Matrix{Vector{Matrix{Int8}}},\n    genotypes_sons::Matrix{Vector{Matrix{Int8}}},\n    x_locations_daughters::Matrix{Vector{Float32}},\n    y_locations_daughters::Matrix{Vector{Float32}},\n    x_locations_sons::Matrix{Vector{Float32}},\n    y_locations_sons::Matrix{Vector{Float32}},\n    K_total::Integer,\n    sigma_comp::Real,\n    intrinsic_R::Real\n)\n\nDetails on behaviour of different constructors\n\nThe first constructor sets up the initial population for the simulation.\n\nThe second constructor creates a new PopulationData using the genotypes and locations of the  offspring.\n\n\n\n\n\n","category":"type"},{"location":"population/#HZAM.Population.Zone","page":"Population","title":"HZAM.Population.Zone","text":"Zone\n\nA Zone stores the genotypes and locations for the individuals contained within  a subset of the range.\n\nFields\n\ngenotypes_F::Vector{Matrix{Int8}}: the female genotypes. rows are alleles (row 1 from mother, row 2 from father) and columns are loci.\ngenotypes_M::Vector{Matrix{Int8}}: the male genotypes.\nx_locations_F::Vector{Float32}: the x coordinates of the females\ny_locations_F::Vector{Float32}: the y coordinates of the females\nx_locations_M::Vector{Float32}: the x coordinates of the males\ny_locations_M::Vector{Float32}: the y coordinates of the males\n\nConstructors\n\n- Zone(\n    starting_N::Integer,\n    total_loci::Integer,\n    x_location::Float32,\n    y_location::Float32,\n    size::Float32,\n    species::Real\n)\n- Zone(\n    genotypes_F::Vector{Matrix{Int8}},\n    genotypes_M::Vector{Matrix{Int8}},\n    x_locations_F::Vector{Float32},\n    y_locations_F::Vector{Float32},\n    x_locations_M::Vector{Float32},\n    y_locations_M::Vector{Float32}\n)\n\nDetails on behaviour of different constructors\n\nThe first constructor sets up the initial locations and genotypes of every  individual in the zone.\n\nThe second constructor creates a new Zone using the genotypes and locations of the  offspring.\n\n\n\n\n\n","category":"type"},{"location":"population/#Functions","page":"Population","title":"Functions","text":"","category":"section"},{"location":"population/","page":"Population","title":"Population","text":"Modules = [HZAM.Population]\nOrder   = [:function]","category":"page"},{"location":"population/#HZAM.Population.assign_zone-Tuple{Float32, Float32}","page":"Population","title":"HZAM.Population.assign_zone","text":"assign_zone(x::Float32, y::Float32)\n\nDetermine which zone a location falls in.\n\n\n\n\n\n","category":"method"},{"location":"population/#HZAM.Population.calc_growth_rates-Tuple{Matrix{HZAM.Population.Zone}, CartesianIndex, Integer, Real, Real}","page":"Population","title":"HZAM.Population.calc_growth_rates","text":"calc_growth_rates(\n    population::Matrix{Zone},\n    zone_index::CartesianIndex,\n    K_total::Integer,\n    sigma_comp::Real,\n    intrinsic_R::Real\n)\n\nCompute the female growth rates assuming no ecological difference.\n\nArguments\n\npopulation::Matrix{Zone}: the matrix of zones storing all the locations, and genotypes in the simulation.\nzone_index::CartesianIndex: the index of the focal zone.\nK_total::Integer: the carrying capacity.\nsigma_comp::Real: the standard deviation for the normal curve used in calculating local density.\nintrinsic_R::Real: the intrinsic growth rate.\n\n\n\n\n\n","category":"method"},{"location":"population/#HZAM.Population.calc_ideal_densities-Tuple{Integer, Real, Vector{Float32}, Vector{Float32}, Real}","page":"Population","title":"HZAM.Population.calc_ideal_densities","text":"calc_ideal_densities(\n    K_total::Integer,\n    sigma_comp::Real,\n    x_locations_F::Vector{Float32},\n    y_locations_F::Vector{Float32},\n    max_dist::Real\n)\n\nCompute expected local densities, based on geographically even distribution of individuals  at carrying capacity.\n\nDensities are calculated using the following integral:\n\nK_totalintlimits_0^2piintlimits_0^003  exp(-fracr^22σ_comp^2)rdrdθ\n\nwhere the density function is equal to 0 outside of the range limits.\n\nArgument\n\nK_total::Integer: the carrying capacity\nsigma_comp::Real: the standard deviation for the normal curve used in calculating local density.\nx_locations_F::Vector{Float32}: the x coordinates where the ideal density is to be computed.\ny_locations_F::Vector{Float32}: the y coordinates where the ideal density is to be computed.\nmax_dist::Real: the cutoff for the furthest away an individual can be and affect the density calculation. Should be 3x sigma_comp.\n\n\n\n\n\n","category":"method"},{"location":"population/#HZAM.Population.calc_real_densities-Tuple{Matrix{HZAM.Population.Zone}, CartesianIndex, Vector{Float32}, Vector{Float32}, Real, Real}","page":"Population","title":"HZAM.Population.calc_real_densities","text":"calc_real_densities(\n    population::Matrix{Zone},\n    zone_index::CartesianIndex,\n    x_locations_F::Vector{Float32},\n    y_locations_F::Vector{Float32},\n    max_dist::Real,\n    sigma_comp::Real;\n    species=-1,\n    loci=[-1]\n)\n\nCompute the population density at each female's location.\n\nArguments\n\npopulation::Matrix{Zone}: the matrix of zones storing all the locations, and genotypes in the simulation.\nzone_index::CartesianIndex: the index of the focal zone.\nx_locations_F::Vector{Float32}: the x coordinates of every female in the focal zone.\ny_locations_F::Vector{Float32}: the y coordinates of every female in the focal zone.\nmax_dist::Real: the distance cutoff for the density calculation.\nsigma_comp::Real: the standard deviation used in the density calculation.\n\n\n\n\n\n","category":"method"},{"location":"population/#HZAM.Population.calc_species_overlap-Tuple{Matrix{HZAM.Population.Zone}, Real, Real, Union{UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Population","title":"HZAM.Population.calc_species_overlap","text":"calc_species_overlap(\n    population::Matrix{Zone},\n    max_dist::Real,\n    sigma_comp::Real,\n    loci::Union{UnitRange{<:Integer},Vector{<:Integer}}\n)\n\nCompute the total overlap between the two species.\n\nArguments\n\npopulation::Matrix{Zone}: the genotypes and locations of all individuals.\nmax_dist::Real: the distance cutoff for the density calculation.\nsigma_comp::Real: the standard deviation used for the density calculation.\nloci::Union{UnitRange{<:Integer},Vector{<:Integer}}: the loci used to determine species.\n\n\n\n\n\n","category":"method"},{"location":"population/#HZAM.Population.calc_squared_distances-Tuple{Vector{Float32}, Vector{Float32}, Float32, Float32, Real}","page":"Population","title":"HZAM.Population.calc_squared_distances","text":"function calc_squared_distances(\n    x_locations::Vector{Float32},\n    y_locations::Vector{Float32},\n    x::Float32,\n    y::Float32,\n    cutoff::Real\n)\n\nCompute the squared distances from a set of locations to a single location. Discards  distances above the given cutoff.\n\nExample\n\njulia> calc_squared_distances([0.4f0, 0f0, 0.5f0], [0.4f0, 0f0, 0.5f0],0.1)\n2-element Vector{Float32}:\n 0.0\n 0.019999998\n\n\n\n\n\n","category":"method"},{"location":"population/#HZAM.Population.calc_survival_fitness_epistasis","page":"Population","title":"HZAM.Population.calc_survival_fitness_epistasis","text":"calc_survival_fitness_epistasis(\n    genotype::Matrix{<:Integer}, \n    hybrid_survival_loci::Union{UnitRange{<:Integer},Vector{<:Integer}}, \n    w_hyb::Real, \n    beta::Real=1\n)\n\nCompute the survival fitness of an individual according to epistasis, with the beta  parameter set to one as a default.\n\nArguments\n\ngenotype:Matrix{<:Integer}: the individual's genotype.\nhybrid_survival_loci::Union{UnitRange{<:Integer},Vector{<:Integer}}: the loci responsible for heterozygote disadvantage in computing the survival fitness.\nw_hyb::Real: the simulation's hybrid fitness value.\nbeta::Real\n\n\n\n\n\n","category":"function"},{"location":"population/#HZAM.Population.calc_survival_fitness_hetdisadvantage-Tuple{Matrix{<:Integer}, Real}","page":"Population","title":"HZAM.Population.calc_survival_fitness_hetdisadvantage","text":"calc_survival_fitness_hetdisadvantage(genotype::Matrix{<:Integer}, w_hyb::Real)\n\nCompute the survival fitness of an individual according to heterozygosity.\n\nArguments\n\ngenotype:Matrix{<:Integer}: the individual's genotype.\nw_hyb::Real: the simulation's hybrid fitness value.\n\n\n\n\n\n","category":"method"},{"location":"population/#HZAM.Population.genotype_mean-Tuple{Matrix{<:Integer}, Union{UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Population","title":"HZAM.Population.genotype_mean","text":"genotype_mean(genotype::Matrix{<:Integer}, loci::Union{UnitRange{<:Integer},Vector{<:Integer}})\n\nCompute the mean value of the genotype across the list of loci given.\n\nExample\n\njulia> genotype_mean([0 1 0; 0 1 0], [1,3])\n0.0\n\n\n\n\n\n","category":"method"},{"location":"population/#HZAM.Population.get_surrounding_zones-Tuple{CartesianIndex}","page":"Population","title":"HZAM.Population.get_surrounding_zones","text":"get_surrounding_zones(zone_index::CartesianIndex)\n\nReturn a list of the indices of the neighbouring zones and the given zone index.\n\n\n\n\n\n","category":"method"},{"location":"population/#HZAM.Population.max_radius_squared-Tuple{Float32, Float32, Real, Real}","page":"Population","title":"HZAM.Population.max_radius_squared","text":"max_radius_squared(x::Float32, y::Float32, t::Real, max_dist::Real)\n\nCompute the distance from a point along an angle to the limit of the range  (defined by x∈[0,1), y∈[0,1)). \n\nThe distance gets cut off at max_dist. Used in calculating the ideal densities.\n\nArguments\n\nx::Float32: the starting x coordinate\ny::Float32: the starting y coordinate\nt::Real: the angle.\nmax_dist: the maximum distance.\n\n\n\n\n\n","category":"method"},{"location":"population/#HZAM.Population.new_location-Tuple{Float32, Float32, Real}","page":"Population","title":"HZAM.Population.new_location","text":"new_location(x::Float32, y::Float32, sigma_disp::Real)::Tuple{Float32,Float32}\n\nCompute the location after dispersal of an offspring.\n\nArguments\n\nx::Float32: the x coordinate of the mother\ny::Float32: the y coordinate of the mother\nsigma_disp::Real: the standard deviation in the dispersal distance\n\n\n\n\n\n","category":"method"},{"location":"population/#HZAM.Population.new_location-Tuple{Vector{Float32}, Vector{Float32}}","page":"Population","title":"HZAM.Population.new_location","text":"new_location(\n    starting_range_x::Vector{Float32},\n    starting_range_y::Vector{Float32}\n)::Tuple{Float32,Float32}\n\nRandomly generate a location within the given range.\n\nArguments\n\nstarting_range_x::Vector{Float32}: the x limits of the range\nstarting_range_y::Vector{Float32}: the y limits of the range\n\n\n\n\n\n","category":"method"},{"location":"mating/#Mating","page":"Mating","title":"Mating","text":"","category":"section"},{"location":"mating/","page":"Mating","title":"Mating","text":"Modules = [HZAM.Mating]\nOrder   = [:module]","category":"page"},{"location":"mating/#HZAM.Mating","page":"Mating","title":"HZAM.Mating","text":"Functions involved in mate selection and generating the offspring genotype.\n\n\n\n\n\n","category":"module"},{"location":"mating/#Functions","page":"Mating","title":"Functions","text":"","category":"section"},{"location":"mating/","page":"Mating","title":"Mating","text":"Modules = [HZAM.Mating]\nOrder   = [:function]","category":"page"},{"location":"mating/#HZAM.Mating.calc_match_strength-Tuple{Matrix{<:Integer}, Matrix{<:Integer}, Float64, Any, Any}","page":"Mating","title":"HZAM.Mating.calc_match_strength","text":"calc_match_strength(\n    female_genotype::Matrix{<:Integer}, \n    male_genotype::Matrix{<:Integer}, \n    pref_SD::Float64, \n    female_mating_trait_loci, \n    male_mating_trait_loci\n)\n\nCompare the male's mating trait with the female mating trait to determine the match strength  along a Gaussian acceptance curve. \n\nThe acceptance curve is bounded between 0 and 1.\n\nArguments\n\nfemale_genotype::Matrix{<:Integer}: the genotype of the focal female.\nmale_genotype::Matrix{<:Integer}: the genotype of the focal male.\npref_SD::Float64: width of the Gaussian acceptance curve.\nfemale_mating_trait_loci: the loci contributing to the female's mate preference.\nmale_mating_trait_loci: the loci contributing to the male's trait.\n\n\n\n\n\n","category":"method"},{"location":"mating/#HZAM.Mating.choose_closest_male-Tuple{Matrix{HZAM.Population.Zone}, Vector{CartesianIndex{2}}, Dict{CartesianIndex, <:Vector{<:Integer}}, Float32, Float32, Float32}","page":"Mating","title":"HZAM.Mating.choose_closest_male","text":"choose_closest_male(\n    zones::Matrix{Population.Zone},\n    zone_indices::Vector{CartesianIndex{2}},\n    elig_M::Dict{CartesianIndex,<:Vector{<:Integer}},\n    x_location_mother::Float32,\n    y_location_mother::Float32,\n    neighbourhood_size::Float32\n)\n\nFind the index of the closest male within an area covering multiple zones from a list of  eligible males. \n\nReturn both the male index and its zone index. Return -1 for both values if  no eligible male is found.\n\nArguments\n\nzones::Matrix{Population.Zone}: the matrix storing the population data for each zone.\nzone_indices::Vector{CartesianIndex{2}}: the indices of the zones to be checked for the closest male.\nelig_M::Dict{CartesianIndex,<:Vector{<:Integer}}: the indices of all the eligible males in each zone.\nx_location_mother::Float32: the x coordinate from which the males' distances are computed.\ny_location_mother::Float32: the y coordinate from which the males' distances are computed.\nneighbourhood_size::Float32: the distance cutoff for the search.\n\n\n\n\n\n","category":"method"},{"location":"mating/#HZAM.Mating.choose_closest_male_from_zone-Tuple{Vector{<:Integer}, Vector{Float32}, Vector{Float32}, Float32, Float32}","page":"Mating","title":"HZAM.Mating.choose_closest_male_from_zone","text":"choose_closest_male_from_zone(\n    elig_M::Vector{<:Integer},\n    x_locations_M::Vector{Float32},\n    y_locations_M::Vector{Float32},\n    x_location_mother::Float32,\n    y_location_mother::Float32\n)\n\nFind the index of the closest male within a single zone from a list of eligible males.\n\nArguments\n\nelig_M::Vector{<:Integer}: the indices of all the eligible males.\nx_locations_M::Vector{Float32}: the x coordinates of all the males in the zone.\ny_locations_M::Vector{Float32}: the x coordinates of all the males in the zone.\nx_location_mother::Float32: the x coordinate from which the males' distances are computed.\ny_location_mother::Float32: the y coordinate from which the males' distances are computed.\n\n\n\n\n\n","category":"method"},{"location":"mating/#HZAM.Mating.distance-NTuple{4, Float32}","page":"Mating","title":"HZAM.Mating.distance","text":"distance(x1::Float32, y1::Float32, x2::Float32, y2::Float32)\n\nCompute the distance between (x1,y1) and (x2,y2).\n\n\n\n\n\n","category":"method"},{"location":"mating/#HZAM.Mating.generate_offspring_genotype-Tuple{Matrix{<:Integer}, Matrix{<:Integer}}","page":"Mating","title":"HZAM.Mating.generate_offspring_genotype","text":"generate_offspring_genotype(\n    mother_genotype::Matrix{<:Integer}, \n    father_genotype::Matrix{<:Integer}\n)::Matrix{<:Integer}\n\nGenerate the offspring genotype from the parent genotypes. \n\nFor each locus (column), first row for allele from mother, second row for allele from  father. The number of loci in each genotype must be equal.\n\nExample\n\njulia> generate_offspring_genotype([0 0 0; 0 0 0], [1 1 1; 1 1 1])\n2×3 Matrix:\n 0  0  0\n 1  1  1\n\n\n\n\n\n","category":"method"},{"location":"hzam/#HZAM","page":"HZAM","title":"HZAM","text":"","category":"section"},{"location":"hzam/#Index","page":"HZAM","title":"Index","text":"","category":"section"},{"location":"hzam/","page":"HZAM","title":"HZAM","text":"Pages = [\"population.md\", \"mating.md\", \"data_analysis.md\", \"plot_data.md\", \"index.md\"]","category":"page"},{"location":"hzam/#Functions","page":"HZAM","title":"Functions","text":"","category":"section"},{"location":"hzam/","page":"HZAM","title":"HZAM","text":"Modules = [HZAM]\nPages = [\"simulation.jl\", \"summarize_data.jl\"]\nOrder   = [:function]","category":"page"},{"location":"hzam/#HZAM.run_one_HZAM_sim-Tuple{Real, Real, Real}","page":"HZAM","title":"HZAM.run_one_HZAM_sim","text":"run_one_HZAM_sim(\n\tw_hyb::Real, \n\tS_AM::Real,\n\tintrinsic_R::Real; \n\t<keyword arguments>\n)\n\nRun a single HZAM simulation.\n\nArguments\n\nw_hyb::Real: the hybrid fitness.\nS_AM::Real: the strength of assortative mating.\nintrinsic_R::Real: the intrinsic growth rate.\nK_total::Integer=20000: the carrying capacity of the environment.\nmax_generations::Integer=1000: the number of generations that the simulation will run for.\ntotal_loci::Integer=6: the total number of loci in the genome.\nfemale_mating_trait_loci=1:3: the loci specifying the female's mate preference.\nmale_mating_trait_loci=1:3: the loci specifying the male's mating trait.\nhybrid_survival_loci=1:3: the loci specifying the probability of survival to adulthood.\nsurvival_fitness_method:String=\"epistasis\": the method used to calculate the probability of survival to adulthood.\nper_reject_cost=0: the fitness loss of female per male rejected (due to search time, etc.). Can take values of 0 to 1.\nsigma_disp::Float32=0.05f0: the standard deviation of the normal distribution determining how far offspring will disperse from their mothers.\nsigma_comp::Float32=0.01f0: the standard deviation for the normal curve used in calculating local density.\ndo_plot=true: the program will display a plot of the locations and hybrid indices of every individual while the simulation is running if this is true.\nplot_int=10: the interval (measured in generations) between updating the plot.\ngene_plot=false: if true, generates phenotype plots.\nsave_plot=false: if true, saves each plot to a PNG file.\ntrack_population_data=false: if true, stores the population size, hybridity, overlap, and cline width for each generation\nrun_name=\"temp\": the name of the output file\nexit_early=false: when true the simulation will exit halfway through if the cline is stable.\n\n\n\n\n\n","category":"method"},{"location":"hzam/#HZAM.load_from_folder-Tuple{String}","page":"HZAM","title":"HZAM.load_from_folder","text":"load_from_folder(dir::String)\n\nLoad the data from each simulation output file stored in the given directory into an array  organized by hybrid fitness and assortative mating strength.\n\n\n\n\n\n","category":"method"},{"location":"hzam/#HZAM.load_from_folder_whyb_1-Tuple{String}","page":"HZAM","title":"HZAM.load_from_folder_whyb_1","text":"load_from_folder(dir::String)\n\nLoad the data from each simulation output file stored in the given directory where hybrid  fitness is one and store the output in a vector of tuples (outcome, S_AM).\n\n\n\n\n\n","category":"method"},{"location":"hzam/#HZAM.mean-Tuple{Any}","page":"HZAM","title":"HZAM.mean","text":"Compute the mean value of a vector.\n\n\n\n\n\n","category":"method"},{"location":"hzam/#HZAM.plot_fitnesses-Tuple{Vector{<:Dict}}","page":"HZAM","title":"HZAM.plot_fitnesses","text":"plot_fitnesses(fitnesses::Vector{<:Dict})\n\nProduce a plot of fitnesses per phenotype over time.\n\nArguments\n\nfitnesses::Vector{<:Dict}: number of offspring per phenotype each generation.\n\n\n\n\n\n","category":"method"},{"location":"hzam/#HZAM.plot_output_field-Tuple{Array{<:Real}, Array{HZAM.DataAnalysis.SimParams}}","page":"HZAM","title":"HZAM.plot_output_field","text":"plot_output_field(\n\toutcomes::Array{<:Real},\n\tsim_params::Array{DataAnalysis.SimParams}\n)\n\nCreate a heatmap of an output variable vs hybrid fitness and assortative mating.\n\nArguments\n\noutcomes::Array{:Real}: the output from the simulation to be displayed.\nsim_params::Array{<:DataAnalysis.SimParams}: the simulation parameters resulting in the outcomes.\n\n\n\n\n\n","category":"method"},{"location":"hzam/#HZAM.plot_population_tracking_data-Tuple{String}","page":"HZAM","title":"HZAM.plot_population_tracking_data","text":"plot_population_tracking_data(filepath::String)\n\nCreate plots of the population size, hybrid zone width, hybrid index, and population overlap vs time.\n\nArguments\n\nfilepath::String:: the filepath for the file containing the outcome of the simulation.\n\n\n\n\n\n","category":"method"},{"location":"hzam/#HZAM.run_HZAM_set-Tuple{String, Int64, Union{UnitRange{<:Integer}, Vector{<:Integer}}, Union{UnitRange{<:Integer}, Vector{<:Integer}}, Union{UnitRange{<:Integer}, Vector{<:Integer}}, Real, Union{UnitRange, Vector{<:Real}}, Union{UnitRange, Vector{<:Real}}}","page":"HZAM","title":"HZAM.run_HZAM_set","text":"run_HZAM_set(\n\tset_name::String,\n\ttotal_loci::Int,\n\tfemale_mating_trait_loci::Union{UnitRange{<:Integer}, Vector{<:Integer}},\n\tmale_mating_trait_loci::Union{UnitRange{<:Integer}, Vector{<:Integer}},\n\thybrid_survival_loci::Union{UnitRange{<:Integer}, Vector{<:Integer}},\n\tper_reject_cost::Real,\n\tw_hyb_set::Union{UnitRange{<:Real}, Vector{<:Real}},\n\tS_AM_set::Union{UnitRange{<:Real}, Vector{<:Real}};\n\t<keyword arguments>\n)\n\nRun the simulation for 64 combinations of hybrid fitness and assortative mating strength and  store the outcome of each simulation in a JLD2 file.\n\nArguments\n\nset_name::String: the name assigned to the set of simulations.\nintrinsic_R::Real: the intrinsic growth rate.\nK_total::Integer=40000: the carrying capacity of the environment.\nmax_generations::Integer=1000: the number of generations that the simulation will run for.\ntotal_loci::Integer=6: the total number of loci in the genome.\nfemale_mating_trait_loci=1:3: the loci specifying the female's mate preference.\nmale_mating_trait_loci=1:3: the loci specifying the male's mating trait.\nhybrid_survival_loci=1:3: the loci specifying the probability of survival to adulthood.\nsurvival_fitness_method:String=\"epistasis\": the method used to calculate the probability of survival to adulthood.\nper_reject_cost=0: the fitness loss of female per male rejected (due to search time, etc.). Can take values of 0 to 1.\nsigma_disp=0.05: the standard deviation of the normal distribution determining how far offspring will disperse from their mothers.\n\n\n\n\n\n","category":"method"},{"location":"hzam/#HZAM.run_HZAM_sets_complete-Tuple{String}","page":"HZAM","title":"HZAM.run_HZAM_sets_complete","text":"run_HZAM_sets_complete(run_name::String;\n\tset_numbers::Union{UnitRange{<:Integer}, Vector{<:Integer}} = 1:9,\n\tw_hyb_set_of_run::Union{UnitRange{<:Real}, Vector{<:Real}} = w_hyb_set,\n\tS_AM_set_of_run::Union{UnitRange{<:Real}, Vector{<:Real}} = S_AM_set,\n\tmax_generations::Integer = 2000,\n\tK_total::Integer = 30000,\n)\n\nRun the main set of simulations used in the paper and save the outcomes to results_folder.\n\nArguments\n\nrun_name::String: the name of the run.\nset_numbers::Union{UnitRange{<:Integer}, Vector{<:Integer}}: which sets to run (the sets \n\nare full pleiotropy, no pleiotropy, magic cue, magic preference, etc.).\n\nw_hyb_set_of_run::Union{UnitRange{<:Real}, Vector{<:Real}}: which w_hyb values to use.\nS_AM_set_of_run::Union{UnitRange{<:Real}, Vector{<:Real}}: which S_AM values to use.\nmax_generations::Integer: how many generations to run the simulations for.\nK_total::Integer: the carrying capacity of the simulated range.\n\n\n\n\n\n","category":"method"},{"location":"hzam/#HZAM.run_HZAM_sets_supplemental-Tuple{String}","page":"HZAM","title":"HZAM.run_HZAM_sets_supplemental","text":"run_HZAM_sets_supplemental(run_name::String;\n\tw_hyb_set_of_run::Union{UnitRange{<:Real}, Vector{<:Real}} = w_hyb_set,\n\tS_AM_set_of_run::Union{UnitRange{<:Real}, Vector{<:Real}} = S_AM_set,\n\tmax_generations::Integer = 2000,\n\tK_total::Integer = 30000,\n)\n\nRun an extra set of simulations and save the outcomes to results_folder. Currently setup  to run no pleiotropy and full pleitropy sets with one locus.\n\nArguments\n\nrun_name::String: the name of the run.\nw_hyb_set_of_run::Union{UnitRange{<:Real}, Vector{<:Real}}: which w_hyb values to use.\nS_AM_set_of_run::Union{UnitRange{<:Real}, Vector{<:Real}}: which S_AM values to use.\nmax_generations::Integer: how many generations to run the simulations for.\nK_total::Integer: the carrying capacity of the simulated range.\n\n\n\n\n\n","category":"method"},{"location":"hzam/#HZAM.set_results_folder-Tuple{String}","page":"HZAM","title":"HZAM.set_results_folder","text":"set_results_folder(dir::String)\n\nSet the output parent directory for all methods in summarize_data.jl.\n\n\n\n\n\n","category":"method"},{"location":"hzam/#HZAM.set_working_dir-Tuple{String}","page":"HZAM","title":"HZAM.set_working_dir","text":"set_working_dir(dir::String)\n\nSet the output directory for all methods in summarize_data.jl.\n\n\n\n\n\n","category":"method"},{"location":"hzam/#HZAM.summarize_gene_correlations-Tuple{String}","page":"HZAM","title":"HZAM.summarize_gene_correlations","text":"summarize_gene_correlations(source_dir::String; filename=\"gene_correlations\")\n\nCreate plots of the gene correlations between different traits vs SAM and whyb for  different combinations of the same loci controlling different traits.\n\nsourcedir should point to a folder containing magicpreference.jld2, magiccue.jld2,  searchcost.jld2, and no_magic.jld2. Each file should contain an outcome array from a simulation set.\n\nArguments\n\nsource_dir::String: the folder where the outcomes of all the simulations are stored.\nfile_name=\"gene_correlations: the name of the image file for the plot. \n\n\n\n\n\n","category":"method"},{"location":"manual_one_simulation/#Running-one-simulation","page":"Running one simulation","title":"Running one simulation","text":"","category":"section"},{"location":"manual_one_simulation/","page":"Running one simulation","title":"Running one simulation","text":"To run a single simulation use the HZAM.run_one_HZAM_sim method. ","category":"page"},{"location":"manual_one_simulation/","page":"Running one simulation","title":"Running one simulation","text":"This method simulates the behaviour of a hybrid zone arising from secondary contact between two species. The carrying capacity of the environment (which is also the starting population size) is specified by K_total. The simulation will run for the number of generations specified by the max_generations parameter.","category":"page"},{"location":"manual_one_simulation/#How-the-simulation-works","page":"Running one simulation","title":"How the simulation works","text":"","category":"section"},{"location":"manual_one_simulation/","page":"Running one simulation","title":"Running one simulation","text":"The simulation starts by initializing the locations and genotypes for the starting population. At the beginning the range is divided in two with species A occupying the left half of the range and species B occupying the right half. Every individual at the beginning is homozygous for each locus, species A being possessing the '0' alleles and species B possessing the '1' alleles. Locations are generated randomly within the initial range of each species.","category":"page"},{"location":"manual_one_simulation/","page":"Running one simulation","title":"Running one simulation","text":"The simulation procedes by executing the following steps:","category":"page"},{"location":"manual_one_simulation/","page":"Running one simulation","title":"Running one simulation","text":"Growth rates are calculated based on local population density.\nMates are chosen by the females. Each female is presented with a series of potential mates sorted by proximity and they can choose to accept or reject based on mating type compatibility.\nThe number of offspring for each female is determined by their respective growth rates\nThe offspring genotypes are generated by randomly taking one allele for each loci from each parent.\nThe odds of each offspring surviving to adulthood are calculated based on hybrid fitness, and some are discarded.\nThe surviving offspring disperse from the mother's location.\nThe parent generation is removed from the simulation.","category":"page"},{"location":"manual_one_simulation/#Displaying-the-simulation-as-it-runs","page":"Running one simulation","title":"Displaying the simulation as it runs","text":"","category":"section"},{"location":"manual_one_simulation/","page":"Running one simulation","title":"Running one simulation","text":"There are two different ways of plotting the simulation data as it runs.","category":"page"},{"location":"manual_one_simulation/","page":"Running one simulation","title":"Running one simulation","text":"By setting do_plot=true the program defaults to generating a plot of the locations and functional hybrid indices (see HZAM.run_one_HZAM_sim for a description of how hybrid indices are calculated). ","category":"page"},{"location":"manual_one_simulation/","page":"Running one simulation","title":"Running one simulation","text":"To instead create a plot showing the number of individuals with each phenotype for each trait, set gene_plot=true.","category":"page"},{"location":"manual_one_simulation/","page":"Running one simulation","title":"Running one simulation","text":"Plots are updated every 10 generations by default or the interval specified by the plot_int parameter. To automatically save each plot to a PNG file set save_plot=true. When the simulation is saving the plots sometimes they don't show up on the screen.","category":"page"},{"location":"manual_one_simulation/#Specifying-which-data-to-track.","page":"Running one simulation","title":"Specifying which data to track.","text":"","category":"section"},{"location":"manual_one_simulation/","page":"Running one simulation","title":"Running one simulation","text":"Setting track_population_data=true will make the simulation record the phenotype frequencies for mating preference and mating cue every generation. This is saved as part of HZAM.DataAnalysis.OutputData.","category":"page"},{"location":"manual_one_simulation/#Saving-simulation-output","page":"Running one simulation","title":"Saving simulation output","text":"","category":"section"},{"location":"manual_one_simulation/","page":"Running one simulation","title":"Running one simulation","text":"The HZAM.run_one_HZAM_sim method returns a HZAM.DataAnalysis.OutputData data structure that has the simulation parameters, the final locations and genotypes of the population, and key statistics on the population recorded at the end of the simulation.","category":"page"},{"location":"manual_one_simulation/","page":"Running one simulation","title":"Running one simulation","text":"This method does not automatically save the output, so it is recommended that you use the JLD2 packge to save the outcome of each simulation.","category":"page"},{"location":"manual_one_simulation/","page":"Running one simulation","title":"Running one simulation","text":"An example of how to run a simulation and save the outcome to a file:","category":"page"},{"location":"manual_one_simulation/","page":"Running one simulation","title":"Running one simulation","text":"using JLD2\nimport HZAM\n\nsimulation_outcome = HZAM.HZAM.run_one_HZAM_sim(\n    0.4, \n    300, \n    0, \n    1.1\n)\n\n@save \"trial1.JLD2\" simulation_outcome","category":"page"},{"location":"manual_simulation_set/#Running-a-simulation-set","page":"Running a simulation set","title":"Running a simulation set","text":"","category":"section"},{"location":"manual_simulation_set/","page":"Running a simulation set","title":"Running a simulation set","text":"To run a set of simulations use the HZAM.run_HZAM_set method.","category":"page"},{"location":"manual_simulation_set/","page":"Running a simulation set","title":"Running a simulation set","text":"This will run the simulation for 64 different combinations of hybrid fitness and assortative mating strength. The values for hybrid fitness (w_hyb) are [1, 0.95, 0.9, 0.8, 0.75, 0.6, 0.5, 0.3] and the values for assortative mating strength (S_AM) are [1, 3, 10, 30, 100, 300, 1000, Inf].","category":"page"},{"location":"manual_simulation_set/","page":"Running a simulation set","title":"Running a simulation set","text":"The outcome of each simulation is stored in the results folder which by default is HZAM_results_GitIgnore/simulation_outcomes. The results folder can be changed using the HZAM.set_results_folder method.","category":"page"},{"location":"manual_simulation_set/","page":"Running a simulation set","title":"Running a simulation set","text":"HZAM.run_HZAM_set returns an outcome array with all the data from each simulation. This array is not automatically saved to file (though it contains the same information that's stored in the simulation set output folder). To save it to a file use the JLD2 package like so:","category":"page"},{"location":"manual_simulation_set/","page":"Running a simulation set","title":"Running a simulation set","text":"using JLD2\nimport HZAM\n\noutcome_array = HZAM.run_HZAM_set(\"my_set\", 1.1, 0)\n\n@save \"my_file.JLD2\" outcome_array","category":"page"},{"location":"manual_simulation_set/#Working-with-the-output-data","page":"Running a simulation set","title":"Working with the output data","text":"","category":"section"},{"location":"manual_simulation_set/","page":"Running a simulation set","title":"Running a simulation set","text":"The HZAM.run_HZAM_set automatically saves the outcome of each simulation to a file. These files can either be read individually or the entire folder can be loaded into an outcome array using HZAM.load_from_folder.","category":"page"},{"location":"manual_simulation_set/","page":"Running a simulation set","title":"Running a simulation set","text":"Data can also be converted to CSV format, but it first needs to be extracted from the OutputData structure.","category":"page"},{"location":"manual_simulation_set/","page":"Running a simulation set","title":"Running a simulation set","text":"Here's an example of how to do this:","category":"page"},{"location":"manual_simulation_set/","page":"Running a simulation set","title":"Running a simulation set","text":"import HZAM\n\noutcome_array = HZAM.load_from_folder(\"HZAM_results_GitIgnore/simulation_outcomes/myset\")\n\nbimodality_array = [o.spatial_data.bimodality for o in outcome_array]\nw_hyb_array = [o.sim_params.w_hyb for o in outcome_array]\nS_AM_array = [o.sim_params.S_AM for o in outcome_array]\n\nHZAM.onvert_to_CSV(\n    bimodality_array,\n    w_hyb_array,\n    S_AM_array,\n    \"bimodality\"\n)","category":"page"},{"location":"plot_data/#PlotData","page":"PlotData","title":"PlotData","text":"","category":"section"},{"location":"plot_data/","page":"PlotData","title":"PlotData","text":"Modules = [HZAM.PlotData]\nOrder   = [:module]","category":"page"},{"location":"plot_data/#HZAM.PlotData","page":"PlotData","title":"HZAM.PlotData","text":"Functions for plotting data while the simulation is running.\n\n\n\n\n\n","category":"module"},{"location":"plot_data/#Constants","page":"PlotData","title":"Constants","text":"","category":"section"},{"location":"plot_data/","page":"PlotData","title":"PlotData","text":"Modules = [HZAM.PlotData]\nOrder   = [:constant]","category":"page"},{"location":"plot_data/#Functions","page":"PlotData","title":"Functions","text":"","category":"section"},{"location":"plot_data/","page":"PlotData","title":"PlotData","text":"Modules = [HZAM.PlotData]\nOrder   = [:function]","category":"page"},{"location":"plot_data/#HZAM.PlotData.count_genotypes-Tuple{Union{UnitRange{<:Integer}, Vector{<:Integer}}, Vector{<:Matrix{<:Integer}}}","page":"PlotData","title":"HZAM.PlotData.count_genotypes","text":"function count_genotypes(\n    range::Union{UnitRange{<:Integer},Vector{<:Integer}},\n    genotypes::Vector{<:Matrix{<:Integer}}\n)\n\nCount the number of individuals with each genotype for a given loci range.\n\n\n\n\n\n","category":"method"},{"location":"plot_data/#HZAM.PlotData.create_gene_plot-Tuple{Vector{<:Matrix{<:Integer}}, NamedTuple, Bool}","page":"PlotData","title":"HZAM.PlotData.create_gene_plot","text":"create_gene_plot(\n    genotypes::Vector{<:Matrix{<:Integer}},\n    loci::NamedTuple,\n    save_plot::Bool\n)\n\nInitialize the plot of the phenotype frequencies for each loci range.\n\nArguments\n\ngenotypes::Vector{<:Matrix{<:Integer}}: the genotypes of every individual.\nloci::NamedTuple: the loci range for each trait.\nsave_plot::Bool: true if the plot is to be saved to a file.\n\n\n\n\n\n","category":"method"},{"location":"plot_data/#HZAM.PlotData.create_population_plot-Tuple{Vector{<:Real}, Vector{Float32}, Vector{Float32}, Bool}","page":"PlotData","title":"HZAM.PlotData.create_population_plot","text":"function create_population_plot(\n    hybrid_indices_functional::Vector{<:Real},\n    x_locations::Vector{Float32},\n    y_locations::Vector{Float32},\n    save_plot::Bool\n)\n\nInitialize the plot of locations and hybrid indices.\n\nArguments\n\nhybrid_indices_functional::Vector{<:Real}: list of the hybrid index (value between 0 and 1) of \n\nevery individual.\n\nx_locations::Vector{Float32}: the x coordinate of every individual. \ny_locations::Vector{Float32}: the y coordinate of every individual.\nsave_plot::Bool: true if the plot is to be saved to a PNG file.\n\n\n\n\n\n","category":"method"},{"location":"plot_data/#HZAM.PlotData.get_expected-Tuple{Real, Integer}","page":"PlotData","title":"HZAM.PlotData.get_expected","text":"get_expected(x::Real, n::Integer)\n\nCompute the expected number of individuals with a given trait hybrid index if the trait is  controlled by 4 loci. \n\nArguments\n\nx::Real: the hybrid index for the trait of interest.\nn::Integer: the total population size.\n\n\n\n\n\n","category":"method"},{"location":"plot_data/#HZAM.PlotData.update_gene_plot-Tuple{Vector{<:Matrix{<:Integer}}, NamedTuple, Integer, Bool}","page":"PlotData","title":"HZAM.PlotData.update_gene_plot","text":"update_gene_plot(\n    genotypes::Vector{<:Matrix{<:Integer}},\n    loci::NamedTuple,\n    generation::Integer,\n    save_plot::Bool\n)\n\nUpdate the plot of the phenotype frequencies for each loci range.\n\nArguments\n\ngenotypes::Vector{<:Matrix{<:Integer}}: the genotypes of every individual.\nloci::NamedTuple: the loci range for each trait.\ngeneration::Integer: the generation # the simulation is on.\nsave_plot::Bool: true if the plot is to be saved to a file.\n\n\n\n\n\n","category":"method"},{"location":"plot_data/#HZAM.PlotData.update_population_plot-Tuple{Vector, Vector, Vector, Integer, Bool}","page":"PlotData","title":"HZAM.PlotData.update_population_plot","text":"update_population_plot(\n    hybrid_indices_functional::Vector,\n    locations::Vector,\n    generation::Integer,\n    save_plot::Bool\n)\n\nUpdate the existing plot with new locations and hybrid indices.\n\nArguments\n\nhybrid_indices_functional::Vector: list of the hybrid index (value between 0 and 1) of \n\nevery individual.\n\nlocations::Vector: the location of every individual (must be in the same order as the \n\nhybrid indices).\n\ngeneration::Integer: the number of elapsed generations.\nsave_plot::Bool: true if the plot is to be saved to a PNG file.\n\n\n\n\n\n","category":"method"},{"location":"data_analysis/#DataAnalysis","page":"DataAnalysis","title":"DataAnalysis","text":"","category":"section"},{"location":"data_analysis/","page":"DataAnalysis","title":"DataAnalysis","text":"Modules = [HZAM.DataAnalysis]\nOrder   = [:module]","category":"page"},{"location":"data_analysis/#HZAM.DataAnalysis","page":"DataAnalysis","title":"HZAM.DataAnalysis","text":"Types and functions used for analyzing data produced by the simulation.\n\n\n\n\n\n","category":"module"},{"location":"data_analysis/#Constants","page":"DataAnalysis","title":"Constants","text":"","category":"section"},{"location":"data_analysis/","page":"DataAnalysis","title":"DataAnalysis","text":"Modules = [HZAM.DataAnalysis]\nOrder   = [:constant]","category":"page"},{"location":"data_analysis/#HZAM.DataAnalysis.initial_par","page":"DataAnalysis","title":"HZAM.DataAnalysis.initial_par","text":"Parameters for fitting sigmoid curves to the clines.\n\n\n\n\n\n","category":"constant"},{"location":"data_analysis/#HZAM.DataAnalysis.spaced_locations","page":"DataAnalysis","title":"HZAM.DataAnalysis.spaced_locations","text":"Evenly spaced locations across the range (one-dimensional).\n\n\n\n\n\n","category":"constant"},{"location":"data_analysis/#Types","page":"DataAnalysis","title":"Types","text":"","category":"section"},{"location":"data_analysis/","page":"DataAnalysis","title":"DataAnalysis","text":"Modules = [HZAM.DataAnalysis]\nOrder   = [:type]","category":"page"},{"location":"data_analysis/#HZAM.DataAnalysis.OutputData","page":"DataAnalysis","title":"HZAM.DataAnalysis.OutputData","text":"OutputData\n\nAn OutputData stores all of the key data from a simulation run.\n\nFields\n\nsim_params::SimParams: the parameters of the simulation.\npopulation_data: the genotypes and locations for all individuals in the simulation.\nhybrid_zone_width::Vector{<:Real}: the cline width associated with the male mating trait.\npopulation_overlap::Vector{<:Real}: the proportion of the range occupied by males of both mating trait phenotypes.\nbimodality::Real: the extent to which phenotypically pure individuals occur in the hybrid zone\npopulation_tracking_data::Vector{PopulationTrackingData}: the population size, hybridity, overlap, and cline width over time.\noverlap::Real: the proportion of the range where both species occur.\n\n\n\n\n\n","category":"type"},{"location":"data_analysis/#HZAM.DataAnalysis.SimParams","page":"DataAnalysis","title":"HZAM.DataAnalysis.SimParams","text":"SimParams\n\nA SimParams stores the parameters used in a simulation.\n\nFields\n\nintrinsic_R::Real: the intrinsic growth rate.\nw_hyb::Real: the hybrid fitness.\nS_AM::Real: the strength of assortative mating.\nK_total::Integer: the carrying capacity of the environment.\nmax_generations::Integer: the number of generations the simulation ran for.\nsigma_disp::Real: the standard deviation for dispersal distance.\ntotal_loci::Integer: the number of loci in the genotypes.\nfemale_mating_trait_loci: the loci controlling mating preference.\nmale_mating_trait_loci: the loci controlling mating cue.\nhybrid_survival_loci: the loci controlling hybrid fitness.\nper_reject_cost::Real: the loss in fitness incurred by a female after rejecting one male.\n\n\n\n\n\n","category":"type"},{"location":"data_analysis/#Functions","page":"DataAnalysis","title":"Functions","text":"","category":"section"},{"location":"data_analysis/","page":"DataAnalysis","title":"DataAnalysis","text":"Modules = [HZAM.DataAnalysis]\nOrder   = [:function]","category":"page"},{"location":"data_analysis/#HZAM.DataAnalysis.calc_bimodality-Tuple{Any, Union{UnitRange{<:Integer}, Vector{<:Integer}}}","page":"DataAnalysis","title":"HZAM.DataAnalysis.calc_bimodality","text":"calc_bimodality(\n\tpd,\n\tloci::Union{UnitRange{<:Integer}, Vector{<:Integer}},\n)\n\nCompute the bimodality of the hybrid zone by calculating the bimodality along 9 transects.\n\nArguments\n\npd: the PopulationData containing the genotypes, x coordinates, and y coordinates of \n\nall individuals.\n\nloci::Union{UnitRange{<:Integer}, Vector{<:Integer}}: the loci specifying the trait of \n\ninterest.\n\n\n\n\n\n","category":"method"},{"location":"data_analysis/#HZAM.DataAnalysis.calc_bimodality_on_transect-Tuple{Any, Vector{<:Real}, Real, Union{UnitRange{<:Integer}, Vector{<:Integer}}}","page":"DataAnalysis","title":"HZAM.DataAnalysis.calc_bimodality_on_transect","text":"calc_bimodality_on_transect(\n\tpd,\n\tsigmoid_curve::Vector{<:Real},\n\ty_coord::Real,\n\tloci::Union{UnitRange{<:Integer}, Vector{<:Integer}}\n)\n\nCompute the bimodality along a transect by locating the midpoint and calculating the  density of phenotypically pure individuals there.\n\nArguments\n\npd: the PopulationData containing the genotypes, x coordinates, and y coordinates of \n\nall individuals.\n\nsigmoid_curve::Vector{<:Real}: a sigmoid curve fit to the cline along the transect.\ny_coord::Real: the y coordinate of the transect.\nloci::Union{UnitRange{<:Integer}, Vector{<:Integer}}: the loci specifying the trait of \n\ninterest.\n\n\n\n\n\n","category":"method"},{"location":"data_analysis/#HZAM.DataAnalysis.calc_cline_width-Tuple{Any, Union{UnitRange{<:Integer}, Vector{<:Integer}}, Union{StepRangeLen{<:Real}, Vector{<:Real}}}","page":"DataAnalysis","title":"HZAM.DataAnalysis.calc_cline_width","text":"calc_cline_width(\n\tpd,\n\tloci::Union{UnitRange{<:Integer}, Vector{<:Integer}},\n\ty_coords::Union{StepRangeLen{<:Real}, Vector{<:Real}},\n)\n\nCompute the cline width by averaging the width along transects at the given y coordinates.\n\nArguments\n\npd: the PopulationData containing the genotypes, x coordinates, and y coordinates of \n\nall individuals.\n\ny_coords: the y coordinates of the transects used to compute the width.\nloci::Union{UnitRange{<:Integer}, Vector{<:Integer}}: the loci specifying the trait of \n\ninterest.\n\n\n\n\n\n","category":"method"},{"location":"data_analysis/#HZAM.DataAnalysis.calc_sigmoid_curve-Tuple{Vector{<:Real}, Vector{<:Real}}","page":"DataAnalysis","title":"HZAM.DataAnalysis.calc_sigmoid_curve","text":"calc_sigmoid_curve(locations_x::Vector{<:Real}, hybrid_indices::Vector{<:Real})\n\nCompute a sigmoid curve that models hybrid index vs location on the x axis.\n\nReturn the output of the sigmoid curve function on 1000 evenly spaced locations.\n\n\n\n\n\n","category":"method"},{"location":"data_analysis/#HZAM.DataAnalysis.calc_traits_additive-Tuple{Vector{<:Matrix{<:Integer}}, Union{UnitRange{<:Integer}, Vector{<:Integer}}}","page":"DataAnalysis","title":"HZAM.DataAnalysis.calc_traits_additive","text":"calc_traits_additive(\n\tgenotypes::Vector{<:Matrix{<:Integer}},\n\tloci::Union{UnitRange{<:Integer},Vector{<:Integer}}\n)::Vector{Float32}\n\nCompute the mean values of the genotypes passed to it at the given loci. Used to determine  trait values in an additive way.\n\n\n\n\n\n","category":"method"},{"location":"data_analysis/#HZAM.DataAnalysis.calc_transect-Tuple{Vector{<:Matrix{<:Integer}}, Vector{<:Real}, Vector{<:Real}, Union{UnitRange{<:Integer}, Vector{<:Integer}}, Real, Real}","page":"DataAnalysis","title":"HZAM.DataAnalysis.calc_transect","text":"calc_transect(\n\tgenotypes::Vector{<:Matrix{<:Integer}}, \n\tx_locations::Vector{<:Real}, \n\ty_locations::Vector{<:Real}, \n\tloci::Union{UnitRange{<:Integer},Vector{<:Integer}}, \n\tsigma_comp::Real, \n\ty_coord::Real\n)\n\nCompute the cline width along a horizontal transect.\n\nArguments\n\ngenotypes::Vector{<:Matrix{<:Integer}} : the genotypes of every individual in the sim.\nx_locations::Vector{<:Real} : the x coordinate of every individual in the sim.\ny_locations::Vector{<:Real} : the y coordinate of every individual in the sim.\nloci::Union{UnitRange{<:Integer},Vector{<:Integer}} : the focal loci.\nsigma_comp::Real : the standard deviation used for the density calculation.\ny_coord::Real : the y coordinate of the transect along which cline width is measured.\n\n\n\n\n\n","category":"method"},{"location":"data_analysis/#HZAM.DataAnalysis.calc_transects-Tuple{Any, Union{UnitRange{<:Integer}, Vector{<:Integer}}, Union{StepRangeLen{<:Real}, Vector{<:Real}}}","page":"DataAnalysis","title":"HZAM.DataAnalysis.calc_transects","text":"calc_transects(\n\tpd,\n\tloci::Union{UnitRange{<:Integer}, Vector{<:Integer}},\n\ty_coords::Union{StepRangeLen{<:Real}, Vector{<:Real}},\n)\n\nCompute a sigmoidal cline model for the specified loci at horizontal transects with the  specified y coordinates. Returns the weighted average hybrid index at evenly spaced  locations along the transect, the sigmoidal curves modeling the transects, and the cline  widths.\n\nArguments\n\npd: the PopulationData containing the genotypes, x coordinates, and y coordinates of \n\nall individuals.\n\ny_coords: the y coordinates of the transects.\nloci::Union{UnitRange{<:Integer}, Vector{<:Integer}}: the loci specifying the trait of \n\ninterest.\n\n\n\n\n\n","category":"method"},{"location":"data_analysis/#HZAM.DataAnalysis.sigmoid-Tuple{Vector{<:Real}, Vector{<:Real}}","page":"DataAnalysis","title":"HZAM.DataAnalysis.sigmoid","text":"sigmoid(x::Vector{<:Real}, p::Vector{<:Real})\n\nCompute the y value for a sigmoid given the x value, centre, and maximum slope.\n\nArguments\n\nx::Real: the value along the x axis where the sigmoid is to be calculated.\np::Vector{<:Real}: the fit parameters where p[1] is the cline centre and p[2] is \n\nthe maximum slope.\n\n\n\n\n\n","category":"method"},{"location":"#HZAM.jl","page":"Home","title":"HZAM.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"HZAM (Hybrid Zone with Assortative Mating) is a system for modelling the behaviour of a  hybrid zone arising from secondary contact between two species.","category":"page"},{"location":"#Package-features","page":"Home","title":"Package features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Run hybrid zone simulations with a wide variety of different parameters (hybrid fitness, strength of assortative mating, amount of ecological difference, etc.)\nTrack different variables over time (gene flow, population overlap, cline width, etc.)\nSave the results in JLD2 or CSV format\nCreate plots showing how variables change over time or how changing the hybrid fitnesss and assortative mating parameters affect the outcome of the simulation.","category":"page"}]
}
